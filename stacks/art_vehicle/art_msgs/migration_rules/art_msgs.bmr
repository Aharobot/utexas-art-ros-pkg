class update__applanix_GpsInfo__4f5e197f8744c1a11f1c94dc6e9a77a6(MessageUpdateRule):
	old_type = "applanix/GpsInfo"
	old_full_text = """
# standard ROS header, includes time stamp

Header header

# Latitude in degrees.  Positive is north of equator, negative is
# south of equator.

float64 latitude

# Longitude in degrees.  Positive is east of prime meridian, negative
# is west of prime meridian.

float64 longitude

# Altitude, in meters.  Positive is above reference (e.g., sea-level),
# and negative is below.

float64 altitude

# UTM WGS84 coordinates, easting [m]

float64 utm_e

# UTM WGS84 coordinates, northing [m]

float64 utm_n

# UTM zone

string zone

# Horizontal dilution of position (HDOP)

float64 hdop

# Vertical dilution of position (VDOP)

float64 vdop

# Horizonal error [m]

float64 err_horz

# Vertical error [m]

float64 err_vert

# Quality of fix 0 = invalid, 1 = GPS fix, 2 = Differential GPS fix

uint16 INVALID_FIX = 0
uint16 GPS_FIX = 1
uint16 DGPS_FIX = 2
uint16 quality

# Number of satellites in view.

uint16 num_sats

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""

	new_type = "art_msgs/GpsInfo"
	new_full_text = """
# GPS position message
#
# Probably to be replaced by a standard ROS message for Diamondback.

# $Id: GpsInfo.msg 604 2010-09-22 15:50:16Z jack.oquin $

# standard ROS header, includes time stamp
Header header

# Latitude in degrees.  Positive is north of equator, negative is
# south of equator.
float64 latitude

# Longitude in degrees.  Positive is east of prime meridian, negative
# is west of prime meridian.
float64 longitude

# Altitude, in meters.  Positive is above reference (e.g., sea-level),
# and negative is below.
float64 altitude

# UTM WGS84 coordinates, easting [m]
float64 utm_e

# UTM WGS84 coordinates, northing [m]
float64 utm_n

# UTM zone
string zone

# Horizontal dilution of position (HDOP)
float64 hdop

# Vertical dilution of position (VDOP)
float64 vdop

# Horizonal error [m]
float64 err_horz

# Vertical error [m]
float64 err_vert

# Quality of fix 0 = invalid, 1 = GPS fix, 2 = Differential GPS fix
uint16 INVALID_FIX = 0
uint16 GPS_FIX = 1
uint16 DGPS_FIX = 2
uint16 quality

# Number of satellites in view.
uint16 num_sats

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id


"""

	order = 0
	migrated_types = []

	valid = True

	def update(self, old_msg, new_msg):
                # message moved, no change to any fields
		new_msg = old_msg

class update__art_nav_CarCommand__a9c426b2a11ce63f7116e941449a149d(MessageUpdateRule):
	old_type = "art_nav/CarCommand"
	old_full_text = """
# car control command with timestamp

Header     header
CarControl control

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: art_nav/CarControl
# car control command

float32 velocity                # forward velocity (m/s), negative is reverse
float32 angle                   # steering angle (degrees)
"""

	new_type = "art_msgs/CarCommand"
	new_full_text = old_full_text

	order = 0
	migrated_types = []

	valid = True

	def update(self, old_msg, new_msg):
                # message moved, no change to any fields
		new_msg = old_msg

