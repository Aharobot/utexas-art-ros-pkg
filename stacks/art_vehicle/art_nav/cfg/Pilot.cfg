#! /usr/bin/env python
#*
#*  Copyright (c) 2010, Jack O'Quin
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the author nor the names of other
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# pilot node dynamic configuration

PACKAGE='art_nav'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *
from driver_base.msg import SensorLevels


# only includes parameters reconfigurable while running

gen = ParameterGenerator()

#       Name, Type, Reconfiguration level, Description, Default, Min, Max
gen.add("maxspeed", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Maximum speed for pilot requests (m/s).", 14.0, 0.0, 25.0)

gen.add("minspeed", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Minimum speed for pilot requests (in reverse) (m/s).", -3.0, -4.0, 0.0)

gen.add("brake_hold", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Brake hold command when stopped.", 0.7, 0.0, 1.0)

gen.add("use_accel_matrix", bool_t, SensorLevels.RECONFIGURE_CLOSE,
        "Use acceleration matrix for speed control.", False)

gen.add("brake_kp", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Brake PID proportional gain (Kp).", -0.2, -10.0, 0.0)

gen.add("brake_ki", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Brake PID integral gain (Ki).", -0.02, -10.0, 0.0)

gen.add("brake_kd", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Brake PID derivative gain (Kd).", -1.6, -10.0, 0.0)

gen.add("throttle_kp", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Throttle PID proportional gain (Kp).", 0.12, 0.0, 10.0)

gen.add("throttle_ki", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Throttle PID integral gain (Ki).", 0.001, 0.0, 10.0)

gen.add("throttle_kd", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Throttle PID derivative gain (Kd).", 0.54, 0.0, 10.0)

exit(gen.generate(PACKAGE, "pilot", "Pilot"))
