#! /usr/bin/env python
#*
#*  Copyright (c) 2010, Jack O'Quin
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the author nor the names of other
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# navigator node dynamic configuration

PACKAGE='art_nav'
import roslib; roslib.load_manifest(PACKAGE)

import math

from dynamic_reconfigure.parameter_generator import *
from driver_base.msg import SensorLevels
from art_msgs.msg import ArtVehicle

# only includes parameters reconfigurable while running

gen = ParameterGenerator()

#       Name, Type, Reconfiguration level, Description, Default, Min, Max

# Course class
gen.add("lane_change_secs", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Lane change target (seconds ahead)", 2.0, 0.0, 8.0)

gen.add("lane_steer_time", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Lane steering time (s)", 2.0, 0.0, 8.0)

gen.add("heading_change_ratio", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Heading change ratio", 0.75, 0.0, 1.0)

gen.add("turning_latency", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Turning latency time (s)", 1.0, 0.0, 4.0)

k_error = 0.5                           # default tuning value
gen.add("turning_offset_tune", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Yaw tuning parameter (offset)", 0.5, 0.0, 1.0)
gen.add("turning_heading_tune", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "yaw tuning parameter (heading)", math.sqrt(k_error/2.0), 0.0, 1.0)

gen.add("turning_int_tune", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "yaw tuning parameter (integral)", 1.25, 0.0, 4.0)

gen.add("yaw_ratio", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Look ahead time for steering towards a polygon (s)", 0.75, 0.0, 4.0)

gen.add("min_lane_change_dist", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Minimum lane change distance (m)", 8.3, 0.0, 16.0)

gen.add("min_lane_steer_dist", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Minimum lane steering distance (m)", 7.0, 0.0, 16.0)

gen.add("max_speed_for_sharp", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Maximum speed for full yaw (m/s)", 3.0, 1.0, 8.0)

gen.add("spring_lookahead", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Spring lookahead distance (m)", 0.0, 0.0, 8.0)

gen.add("real_max_yaw_rate", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Real maximum yaw rate (radians/s)", 0.9, 0.1, 2.0)

gen.add("zone_waypoint_radius", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Zone waypoint radius (m)", 1.0, 0.1, 4.0)

gen.add("zone_perimeter_radius", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Zone perimeter radius (m)", 2.0, 0.1, 4.0)

gen.add("spot_waypoint_radius", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Spot waypoint radius (m)", 0.5, 0.1, 4.0)

# follow_safely controller (to do)
# Obstacle class (to do)
# road controller (to do)
# run controller (to do)

# slow_for_curves controller
gen.add("lookahead_distance", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Turn lookahead distance (m)", 100.0, 0.0, 200.0)

gen.add("max_deceleration", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "turn max deceleration (m/s^2)", 0.4, 0.1, 4.0)

gen.add("max_yaw_rate", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "turn max yaw rate (radians/s)", 0.15, 0.01, 2.0)

gen.add("min_speed_when_slowing_for_curves", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Minimum speed when slowing for curves (m/s)", 3.0, 1.0, 5.0)

gen.add("min_curve_length", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Minimum curve length for turn (m)", 1.5, 1.0, 5.0)

# stop_area controller

gen.add("stop_approach_speed", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Stop line approach speed (m/s)", 3.0, 1.0, 5.0)

# stop and stop_line controllers
gen.add("min_stop_distance", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Minimum distance to begin stopping (m)", 5.0, 0.0, 25.0)

gen.add("stop_creep_speed", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Speed while creeping to stop (m/s)", 1.0, 0.5, 3.0)

gen.add("max_creep_distance", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Distance for which to creep (m)", ArtVehicle.length, 0.0, 5.0)

gen.add("stop_deceleration", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Desired stopping deceleration (m/s^2)", 0.2, 0.05, 2.0)

gen.add("stop_latency", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Brake latency for stopping (s)", 0.0, 0.0, 4.0)

gen.add("stop_distance", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Desired stopping distance (m)", 2.0, 0.0, 4.0)

# uturn controller (to do)

exit(gen.generate(PACKAGE, "navigator", "Navigator"))
