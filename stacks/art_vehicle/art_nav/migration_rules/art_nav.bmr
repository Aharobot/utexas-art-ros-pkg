class update_art_nav_CarCommand_9e70fd1399dd977c7e762c1eab4d6388(MessageUpdateRule):
	old_type = "art_nav/CarCommand"
	old_full_text = """
# car control command

Header  header

float32 velocity                # forward velocity (m/s), negative is reverse
float32 angle                   # steering angle (degrees)

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""

	new_type = "art_nav/CarCommand"
	new_full_text = """
# car control command with timestamp

Header     header
CarControl control

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: art_nav/CarControl
# car control command

float32 velocity                # forward velocity (m/s), negative is reverse
float32 angle                   # steering angle (degrees)
"""

	order = 0
	migrated_types = [
		("Header","Header"),]

	valid = True

	def update(self, old_msg, new_msg):
		self.migrate(old_msg.header, new_msg.header)
		# copy control fields from old message
		new_msg.control = self.get_new_class('art_nav/CarControl')()
		new_msg.control.velocity = old_msg.velocity
		new_msg.control.angle = old_msg.angle
